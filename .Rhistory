pred.1 = get_prediction(1, mtry, nodesize)
return (pred.1>pred.0)
}
get_accuracy <- function(prediction, truth) {
mean(prediction == truth)
}
# Chunk 5
reps = 1
mtries = c(2,5,11)
nodesizes = c(1,20,100)
zeros = rep(0, length(mtries)*length(nodesizes)*reps)
accuracies =array(zeros, dim=c(reps,length(mtries),length(nodesizes)))
for (i in 1:reps){
for (j in 1:length(mtries)){
for (k in 1:length(nodesizes)){
prediction = get_treatment(mtry=mtries[j], nodesize=nodesizes[k])
accuracies[i,k,j] = get_accuracy(prediction, mydata[-train.id, "BEST"])
}
}
}
# Chunk 6
require(knitr)
report = data.frame(apply(accuracies, c(2,3), mean), row.names = nodesizes)
colnames(report) = mtries
kable(report, caption="Model performance for combinations of mtry and nodesize", format.args=list(justify='centre'))
par(mfrow=c(1,3))
for (i in 1:length(mtries)){
boxplot(accuracies[,i,], col = c("lightskyblue3", "gray78", "gold1"),xaxt='n', xlab='mtry', main=paste("nodesize:", nodesizes[i]))
axis(side=1,at=seq(1:3),labels=mtries)
}
View(mydata)
all_data = mydata[,c(-1,-15)]
View(all_data)
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
View(train.data)
View(train.all_data)
train.all_data = all_data[,c(-1,-2, -14)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
printcp(rtree)
par(mfrow=c(1,2))
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
upper_1se = rtree$cptable[opt, 4] + rtree$cptable[opt, 5]
tmp.id = which(rtree$cptable[, 4] <= upper_1se)
CP.1se = 0.5*(rtree$cptable[min(tmp.id[1]),1] + rtree$cptable[min(tmp.id[1])-1,1])
final.rtree = prune(rtree, cp=CP.1se)
par(mfrow=c(1,1))
rpart.plot(final.rtree)
accuracy = get_accuracy(predict(final.rtree,newdata=),mydata$BEST)
accuracy = get_accuracy(predict(rtree,newdata=all_data),mydata$BEST)
accuracy = get_accuracy(predict(rtree,newdata=train.all_data),mydata$BEST)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
set.seed(1)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
set.seed(1)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
set.seed(101)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
set.seed(121)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
set.seed(124)
all_data = mydata[,c(-1,-15)]
get_all_prediction <- function(therapy, mtry, nodesize){
model.data = all_data[all_data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ . , data=model.data, mtry=mtry, nodesize=nodesize)
return (predict(rforest, all_data))
}
get_all_treatment <- function(mtry, nodesize){
pred.0 = get_all_prediction(0, mtry, nodesize)
pred.1 = get_all_prediction(1, mtry, nodesize)
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = get_all_treatment(mtry=11, nodesize=100)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
plotcp(rtree)
rpart.plot(rtree)
printcp(rtree)
printcp(rtree)
par(mfrow=c(1,2))
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
par(mfrow=c(1,2))
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
upper_1se = rtree$cptable[opt, 4] + rtree$cptable[opt, 5]
tmp.id = which(rtree$cptable[, 4] <= upper_1se)
CP.1se = 0.5*(rtree$cptable[min(tmp.id[1]),1] + rtree$cptable[min(tmp.id[1])-1,1])
final.rtree = prune(rtree, cp=CP.1se)
par(mfrow=c(1,1))
rpart.plot(final.rtree)
accuracy = get_accuracy(predict(rtree,newdata=train.all_data),mydata$BEST)
par(mfrow=c(1,1))
rpart.plot(final.rtree)
accuracy = get_accuracy(predict(final.rtree,newdata=train.all_data),mydata$BEST)
accuracy = get_accuracy(predict(final.rtree,newdata=train.all_data[,-12]),mydata$BEST)
printcp(rtree)
accuracy
model.data.0 = all_data[all_data[,"THERAPY"] == 0,]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,]
View(model.data.0)
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,14)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,14)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
rforest.1 = randomForest(model.data.1$Health ~ ., data=model.data.1, mtry=11, nodesize=100)
all_data['PRED'] = max(predict(rforest.0, all_data), predict(rforest.1, all_data))
predict(rforest.0, all_data)
all_data['PRED'] = choose_treatment(pred.1, pred.0)
choose_treatment <- function(pred.1, pred.0){
return (ifelse(pred.1>pred.0, 1,0))
}
all_data['PRED'] = choose_treatment(pred.1, pred.0)
pred.0 = predict(rforest.0, all_data)
pred.1 = predict(rforest.1, all_data)
all_data['PRED'] = choose_treatment(pred.1, pred.0)
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
printcp(rtree)
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
upper_1se = rtree$cptable[opt, 4] + rtree$cptable[opt, 5]
tmp.id = which(rtree$cptable[, 4] <= upper_1se)
CP.1se = 0.5*(rtree$cptable[min(tmp.id[1]),1] + rtree$cptable[min(tmp.id[1])-1,1])
final.rtree = prune(rtree, cp=CP.1se)
par(mfrow=c(1,1))
rpart.plot(final.rtree)
accuracy = mean(predict(final.rtree, all_data) == mydata$BEST)
# Chunk 1: setup
knitr::opts_chunk$set(include = TRUE)  # TRUE for solution; FALSE for questions set
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.height = 6, fig.width = 8, out.width = '80%', fig.align = "center")
options(width = 90)
# Chunk 2
.solution {
background-color: #e6ffe6;
}
# Chunk 3
set.seed(11)
require(randomForest)
mydata = read.csv('Sepsis.csv')
n = nrow(mydata)
train.id = sample(1:n, round(n*0.75,0))
train.data = mydata[train.id,c(-1,-15)]
test.data = mydata[-train.id,c(-1,-15)]
# Chunk 4
get_prediction <- function(therapy, mtry, nodesize){
model.data = train.data[train.data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ ., data=model.data, mtry=mtry,
nodesize=nodesize)
return (predict(rforest, test.data[,-2]))
}
get_treatment <- function(mtry, nodesize){
pred.0 = get_prediction(0, mtry, nodesize)
pred.1 = get_prediction(1, mtry, nodesize)
return (pred.1>pred.0)
}
get_accuracy <- function(prediction, truth) {
mean(prediction == truth)
}
# Chunk 5
reps = 1
mtries = c(2,5,11)
nodesizes = c(1,20,100)
zeros = rep(0, length(mtries)*length(nodesizes)*reps)
accuracies =array(zeros, dim=c(reps,length(mtries),length(nodesizes)))
for (i in 1:reps){
for (j in 1:length(mtries)){
for (k in 1:length(nodesizes)){
prediction = get_treatment(mtry=mtries[j], nodesize=nodesizes[k])
accuracies[i,k,j] = get_accuracy(prediction, mydata[-train.id, "BEST"])
}
}
}
# Chunk 6
require(knitr)
report = data.frame(apply(accuracies, c(2,3), mean), row.names = nodesizes)
colnames(report) = mtries
kable(report, caption="Model performance for combinations of mtry and nodesize", format.args=list(justify='centre'))
par(mfrow=c(1,3))
for (i in 1:length(mtries)){
boxplot(accuracies[,i,], col = c("lightskyblue3", "gray78", "gold1"),xaxt='n', xlab='mtry', main=paste("nodesize:", nodesizes[i]))
axis(side=1,at=seq(1:3),labels=mtries)
}
# Chunk 7
choose_treatment <- function(pred.1, pred.0){
return (ifelse(pred.1>pred.0, 1,0))
}
set.seed(124)
all_data = mydata[,c(-1,-15)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
rforest.1 = randomForest(model.data.1$Health ~ ., data=model.data.1, mtry=11, nodesize=100)
pred.0 = predict(rforest.0, all_data)
pred.1 = predict(rforest.1, all_data)
all_data['PRED'] = choose_treatment(pred.1, pred.0)
# Chunk 8
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
# Chunk 9
printcp(rtree)
# Chunk 10
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
# Chunk 11
upper_1se = rtree$cptable[opt, 4] + rtree$cptable[opt, 5]
tmp.id = which(rtree$cptable[, 4] <= upper_1se)
# Chunk 12
CP.1se = 0.5*(rtree$cptable[min(tmp.id[1]),1] + rtree$cptable[min(tmp.id[1])-1,1])
final.rtree = prune(rtree, cp=CP.1se)
# Chunk 13
par(mfrow=c(1,1))
rpart.plot(final.rtree)
accuracy = mean(predict(final.rtree, all_data) == mydata$BEST)
accuracy = mean(predict(final.rtree, all_data) == all_data$PRED)
accuracy = mean(predict(rtree, all_data) == all_data$PRED)
accuracy = mean(predict(rtree, all_data) == all_data$PRED)
all_data = mydata[,c(-1,-15)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-3,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-3,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
View(model.data.0)
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
rforest.1 = randomForest(model.data.1$Health ~ ., data=model.data.1, mtry=11, nodesize=100)
set.seed(124)
all_data = mydata[,c(-1,-15)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
rforest.1 = randomForest(model.data.1$Health ~ ., data=model.data.1, mtry=11, nodesize=100)
pred.0 = predict(rforest.0, all_data)
pred.1 = predict(rforest.1, all_data)
all_data['PRED'] = choose_treatment(pred.1, pred.0)
mean(all_data$PRAPACHE==mydata$BEST)
mean(all_data$PRED==mydata$BEST)
View(train.all_data)
accuracy = mean(predict(rtree, train.all_data) == all_data$PRED)
# Chunk 1: setup
knitr::opts_chunk$set(include = TRUE)  # TRUE for solution; FALSE for questions set
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.height = 6, fig.width = 8, out.width = '80%', fig.align = "center")
options(width = 90)
# Chunk 2
.solution {
background-color: #e6ffe6;
}
# Chunk 3
set.seed(11)
require(randomForest)
mydata = read.csv('Sepsis.csv')
n = nrow(mydata)
train.id = sample(1:n, round(n*0.75,0))
train.data = mydata[train.id,c(-1,-15)]
test.data = mydata[-train.id,c(-1,-15)]
# Chunk 4
get_prediction <- function(therapy, mtry, nodesize){
model.data = train.data[train.data[,"THERAPY"] == therapy,][,-2]
rforest = randomForest(model.data$Health ~ ., data=model.data, mtry=mtry,
nodesize=nodesize)
return (predict(rforest, test.data[,-2]))
}
get_treatment <- function(mtry, nodesize){
pred.0 = get_prediction(0, mtry, nodesize)
pred.1 = get_prediction(1, mtry, nodesize)
return (pred.1>pred.0)
}
get_accuracy <- function(prediction, truth) {
mean(prediction == truth)
}
# Chunk 5
reps = 100
mtries = c(2,5,11)
nodesizes = c(1,20,100)
zeros = rep(0, length(mtries)*length(nodesizes)*reps)
accuracies =array(zeros, dim=c(reps,length(mtries),length(nodesizes)))
for (i in 1:reps){
for (j in 1:length(mtries)){
for (k in 1:length(nodesizes)){
prediction = get_treatment(mtry=mtries[j], nodesize=nodesizes[k])
accuracies[i,k,j] = get_accuracy(prediction, mydata[-train.id, "BEST"])
}
}
}
# Chunk 6
require(knitr)
report = data.frame(apply(accuracies, c(2,3), mean), row.names = nodesizes)
colnames(report) = mtries
kable(report, caption="Model performance for combinations of mtry and nodesize", format.args=list(justify='centre'))
par(mfrow=c(1,3))
for (i in 1:length(mtries)){
boxplot(accuracies[,i,], col = c("lightskyblue3", "gray78", "gold1"),xaxt='n', xlab='mtry', main=paste("nodesize:", nodesizes[i]))
axis(side=1,at=seq(1:3),labels=mtries)
}
# Chunk 7
choose_treatment <- function(pred.1, pred.0){
return (ifelse(pred.1>pred.0, 1,0))
}
# Chunk 8
set.seed(124)
all_data = mydata[,c(-1,-15)]
model.data.0 = all_data[all_data[,"THERAPY"] == 0,][,c(-2,-14)]
model.data.1 = all_data[all_data[,"THERAPY"] == 1,][,c(-2,-14)]
rforest.0 = randomForest(model.data.0$Health ~ ., data=model.data.0, mtry=11, nodesize=100)
rforest.1 = randomForest(model.data.1$Health ~ ., data=model.data.1, mtry=11, nodesize=100)
pred.0 = predict(rforest.0, all_data)
pred.1 = predict(rforest.1, all_data)
all_data['PRED'] = choose_treatment(pred.1, pred.0)
#mean(all_data$PRED==mydata$BEST)
# Chunk 9
par(mfrow=c(1,2))
require(rpart)
require(rpart.plot)
train.all_data = all_data[,c(-1,-2)]
rtree = rpart(train.all_data$PRED~., data=train.all_data)
par(mfrow=c(1,1))
rpart.plot(rtree)
plotcp(rtree)
# Chunk 10
printcp(rtree)
# Chunk 11
opt = which.min(rtree$cptable[, "xerror"])
rtree$cptable[opt, 4]
# Chunk 12
upper_1se = rtree$cptable[opt, 4] + rtree$cptable[opt, 5]
tmp.id = which(rtree$cptable[, 4] <= upper_1se)
# Chunk 13
CP.1se = 0.5*(rtree$cptable[min(tmp.id[1]),1] + rtree$cptable[min(tmp.id[1])-1,1])
final.rtree = prune(rtree, cp=CP.1se)
# Chunk 14
par(mfrow=c(1,1))
rpart.plot(final.rtree)
predict(final.rtree, all_data)
pred.tree = ifelse(predict(final.rtree, all_data)>0.5,1,0)
accuracy = mean(pred.tree==mydata[,"BEST"])
